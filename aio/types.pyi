from typing import Any, Mapping, Protocol, TypeVar

T = TypeVar("T")

class HasFileno(Protocol):
    def fileno(self) -> int: ...

FileDescriptorLike = HasFileno | int

class STDSelectorKey(Protocol[T]):
    fileobj: FileDescriptorLike
    fd: int
    events: int
    data: T

class STDSelector(Protocol[T]):
    """
    Fully mirrors `selectors.BaseSelector` interface, but make it more precise about
    selector key `data` filed type.
    """

    def register(
        self, fileobj: FileDescriptorLike, events: int, data: T = ...
    ) -> STDSelectorKey[T]: ...
    def unregister(self, fileobj: FileDescriptorLike) -> STDSelectorKey[T]: ...
    def modify(
        self, fileobj: FileDescriptorLike, events: int, data: T = ...
    ) -> STDSelectorKey[T]: ...
    def select(self, timeout: float | None = None) -> list[tuple[STDSelectorKey[T], int]]: ...
    def close(self) -> None: ...
    def get_key(self, fileobj: FileDescriptorLike) -> STDSelectorKey[T]: ...
    def get_map(self) -> Mapping[FileDescriptorLike, STDSelectorKey[T]]: ...
    def __enter__(self) -> STDSelector[T]: ...
    def __exit__(self, *args: Any) -> None: ...

LoggerExcInfo = BaseException | bool

class Logger(Protocol):
    def debug(self, msg: str, exc_info: LoggerExcInfo | None = None, **params: Any) -> None: ...
    def info(self, msg: str, exc_info: LoggerExcInfo | None = None, **params: Any) -> None: ...
    def warning(self, msg: str, exc_info: LoggerExcInfo | None = None, **params: Any) -> None: ...
    def error(self, msg: str, exc_info: LoggerExcInfo | None = None, **params: Any) -> None: ...
    def bind(self, **params: Any) -> Logger: ...
